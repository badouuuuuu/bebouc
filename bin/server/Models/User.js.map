{"version":3,"sources":["../../../src/server/Models/User.js"],"names":["mongoose","require","jwt","bcrypt","userSchema","Schema","email","type","String","lowercase","trim","unique","required","password","name","surname","admin","Boolean","timestamps","createdAt","methods","authenticate","next","compare","then","res","catch","err","console","log","getToken","encode","id","_id","process","env","JWT_TOKEN","module","exports","model"],"mappings":";;AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,YAAD,CAAnB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AAGA,IAAIG,UAAU,GAAG,IAAIJ,QAAQ,CAACK,MAAb,CACb;AACIC,EAAAA,KAAK,EAAE;AACHC,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,SAAS,EAAE,IAFR;AAGHC,IAAAA,IAAI,EAAE,IAHH;AAIHC,IAAAA,MAAM,EAAE,IAJL;AAKHC,IAAAA,QAAQ,EAAE;AALP,GADX;AAQIC,EAAAA,QAAQ,EAAE;AACNN,IAAAA,IAAI,EAAEC,MADA;AAENI,IAAAA,QAAQ,EAAE;AAFJ,GARd;AAYIE,EAAAA,IAAI,EAAE;AACFP,IAAAA,IAAI,EAAEC,MADJ;AAEFI,IAAAA,QAAQ,EAAE;AAFR,GAZV;AAgBIG,EAAAA,OAAO,EAAE;AACLR,IAAAA,IAAI,EAAEC,MADD;AAELI,IAAAA,QAAQ,EAAE;AAFL,GAhBb;AAoBII,EAAAA,KAAK,EAAE;AACHT,IAAAA,IAAI,EAAEU,OADH;AAEHL,IAAAA,QAAQ,EAAE;AAFP;AApBX,CADa,EA0Bb;AAACM,EAAAA,UAAU,EAAE;AAACC,IAAAA,SAAS,EAAE;AAAZ;AAAb,CA1Ba,CAAjB;AA8BAf,UAAU,CAACgB,OAAX,GAAqB;AACjBC,EAAAA,YAAY,EAAE,UAASR,QAAT,EAAmBS,IAAnB,EAAiD;AAC3DnB,IAAAA,MAAM,CACDoB,OADL,CACaV,QADb,EACuB,KAAKA,QAD5B,EAEKW,IAFL,CAEUC,GAAG,IAAI;AACTH,MAAAA,IAAI,CAACG,GAAD,CAAJ;AACH,KAJL,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAPL;AAQH,GAVgB;AAWjBG,EAAAA,QAAQ,EAAE,YAAW;AACjBF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAjB;AACA,WAAOd,GAAG,CAAC6B,MAAJ,CACH;AAACC,MAAAA,EAAE,EAAE,KAAKC,GAAV;AAAejB,MAAAA,KAAK,EAAE,KAAKA;AAA3B,KADG,EAEHkB,OAAO,CAACC,GAAR,CAAYC,SAFT,CAAP;AAIH;AAjBgB,CAArB;AAqBAC,MAAM,CAACC,OAAP,GAAiBtC,QAAQ,CAACuC,KAAT,CAAe,MAAf,EAAuBnC,UAAvB,CAAjB","sourcesContent":["const mongoose = require(\"mongoose\");\nconst jwt = require(\"jwt-simple\");\nconst bcrypt = require(\"bcryptjs\");\n\n// Mongoose Schema\nlet userSchema = new mongoose.Schema(\n    {\n        email: {\n            type: String,\n            lowercase: true,\n            trim: true,\n            unique: true,\n            required: true,\n        },\n        password: {\n            type: String,\n            required: true,\n        },\n        name: {\n            type: String,\n            required: true,\n        },\n        surname: {\n            type: String,\n            required: true,\n        },\n        admin: {\n            type: Boolean,\n            required: true,\n        },\n    },\n    {timestamps: {createdAt: \"created_at\"}},\n);\n\n// JTW methods\nuserSchema.methods = {\n    authenticate: function(password, next /* fonction callback */) {\n        bcrypt\n            .compare(password, this.password)\n            .then(res => {\n                next(res);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    },\n    getToken: function() {\n        console.log(this.admin);\n        return jwt.encode(\n            {id: this._id, admin: this.admin},\n            process.env.JWT_TOKEN,\n        );\n    },\n};\n\n// Translate Schema into Model and export\nmodule.exports = mongoose.model(\"user\", userSchema);\n"],"file":"User.js"}
{"version":3,"sources":["../../../src/server/Controllers/Loan.js"],"names":["Loan","require","list","req","res","find","sort","borrowerID","then","loan","json","create","bookID","body","active","save","tag","catch","err","status","send","edit","findByIdAndUpdate","params","id","new","destroy","findById","remove","success","exports"],"mappings":";;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,mBAAD,CAApB;;AAEA,MAAMC,IAAI,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AACvBJ,EAAAA,IAAI,CAACK,IAAL,GACKC,IADL,CACU;AAACC,IAAAA,UAAU,EAAE;AAAb,GADV,EAEKC,IAFL,CAEUC,IAAI,IAAIL,GAAG,CAACM,IAAJ,CAASD,IAAT,CAFlB;AAGH,CAJD;;AAMA,MAAME,MAAM,GAAG,CAACR,GAAD,EAAMC,GAAN,KAAc;AAEzB,MAAIJ,IAAJ,CAAS;AACLY,IAAAA,MAAM,EAAET,GAAG,CAACU,IAAJ,CAASD,MADZ;AAELL,IAAAA,UAAU,EAAEJ,GAAG,CAACU,IAAJ,CAASN,UAFhB;AAGLO,IAAAA,MAAM,EAAEX,GAAG,CAACU,IAAJ,CAASC;AAHZ,GAAT,EAKKC,IALL,GAMKP,IANL,CAMUQ,GAAG,IAAIZ,GAAG,CAACM,IAAJ,CAASM,GAAT,CANjB,EAOKC,KAPL,CAOWC,GAAG,IAAId,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,GAArB,CAPlB;AAQH,CAVD;;AAYA,MAAMG,IAAI,GAAG,CAAClB,GAAD,EAAMC,GAAN,KAAc;AACvBJ,EAAAA,IAAI,CAACsB,iBAAL,CAAuBnB,GAAG,CAACoB,MAAJ,CAAWC,EAAlC,EAAsCrB,GAAG,CAACU,IAA1C,EAAgD;AAACY,IAAAA,GAAG,EAAE;AAAN,GAAhD,EACKjB,IADL,CACUC,IAAI,IAAIL,GAAG,CAACM,IAAJ,CAASD,IAAT,CADlB,EAEKQ,KAFL,CAEWC,GAAG,IAAId,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,GAArB,CAFlB;AAGH,CAJD;;AAMA,MAAMQ,OAAO,GAAG,CAACvB,GAAD,EAAMC,GAAN,KAAc;AAC1BJ,EAAAA,IAAI,CAAC2B,QAAL,CAAcxB,GAAG,CAACoB,MAAJ,CAAWC,EAAzB,EACKhB,IADL,CACUC,IAAI,IAAIA,IAAI,CAACmB,MAAL,GAAcpB,IAAd,CAAmB,MAAMJ,GAAG,CAACM,IAAJ,CAAS;AAACmB,IAAAA,OAAO,EAAE;AAAV,GAAT,CAAzB,CADlB,EAEKZ,KAFL,CAEWC,GAAG,IAAId,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBT,IAAhB,CAAqBQ,GAArB,CAFlB;AAGH,CAJD;;AAOAY,OAAO,CAAC5B,IAAR,GAAeA,IAAf;AACA4B,OAAO,CAACnB,MAAR,GAAiBA,MAAjB;AACAmB,OAAO,CAACT,IAAR,GAAeA,IAAf;AACAS,OAAO,CAACJ,OAAR,GAAkBA,OAAlB","sourcesContent":["const Loan = require(\"../Models/Loan.js\");\n\nconst list = (req, res) => {\n    Loan.find()\n        .sort({borrowerID: 1})\n        .then(loan => res.json(loan));\n};\n\nconst create = (req, res) => {\n    // Mettre une condition pour vérifier que qu'un loan actif sur ce bouquin n'existe pas déjà\n    new Loan({\n        bookID: req.body.bookID,\n        borrowerID: req.body.borrowerID,\n        active: req.body.active,\n    })\n        .save()\n        .then(tag => res.json(tag))\n        .catch(err => res.status(400).send(err));\n};\n\nconst edit = (req, res) => {\n    Loan.findByIdAndUpdate(req.params.id, req.body, {new: true})\n        .then(loan => res.json(loan))\n        .catch(err => res.status(400).send(err));\n};\n\nconst destroy = (req, res) => {\n    Loan.findById(req.params.id)\n        .then(loan => loan.remove().then(() => res.json({success: true})))\n        .catch(err => res.status(404).json(err));\n};\n\n// Exporting methods\nexports.list = list;\nexports.create = create;\nexports.edit = edit;\nexports.destroy = destroy;\n"],"file":"Loan.js"}